extends ./layout

block content

    .module-container
        .md.toc-container
            .search
                i.iconfont.icon-search
                input(type="text" placeholder="Search #{Object.keys(licia).length} modules")
            != toc
        .md.doc-container!= contents

    script.
        _.ready(function search() 
        {
            var $input = _.$('.search input'),
                $tocContainer = _.$('.toc-container ul'),
                $tocList = _.$('.toc-container ul li');

            $input.get(0).focus();    

            var originList = [];
            $tocList.each(function () {
                originList.push(_.$(this).text());    
            });
            var displayList = originList;
            function renderList() {
                const html = displayList.map(function (name) {
                    return '<li><a href="#' + name.replace(/\$/, 'dollar-').toLowerCase() + '">' + name + '</a></li>';
                }).join('');

                $tocContainer.html(html)
            }

            function search() {
                var val = _.trim($input.val().toLowerCase());

                $tocContainer.html('')

                if (val === '') {
                    displayList = originList;
                } else {
                    displayList = _.fuzzySearch(val, originList);
                }

                renderList();
            }
            search();

            $input.on('input', search);
        });
        _.ready(function buildMod() 
        {
            _.$('.download').on('click', function () 
            {
                window.location = '/builder.html?module=' + _.$(this).data('name');                
            });   
        });
        _.ready(function scrollEffect()
        {
            var $docContainer = _.$('.doc-container'),
                docContainer = $docContainer.get(0),
                docTop = $docContainer.offset().top;

            _.$('.toc-container').on('click', 'a', function (e)
            {
                e.preventDefault();

                var scrollTop = docContainer.scrollTop,
                    href = _.$(this).attr('href');

                new _.Tween({
                    y: scrollTop
                }).on('update', function (target)
                {
                    docContainer.scrollTop = target.y;
                }).to({
                    y: _.$(href).offset().top - docTop + scrollTop
                }, 300, 'inQuad').play();

                window.location.hash = href;
            });
        });
        _.ready(function repl() 
        {
            var $pre = _.$('pre'),
                container = _.$('.doc-container').get(0);

            $pre.each(function () {
                var $this = _.$(this);
                var $code = $this.find('code');
                if (!$code.hasClass('language-javascript')) {
                    return;
                }

                $this.append('<a class="btn-repl">Try in REPL</a>');
            });    

            $pre.on('click', '.btn-repl', function () 
            {
                var $el = _.$(this).parent(),
                    el = $el.get(0),
                    code = $el.find('code').text();

                var nodeList = container.children, h2;
                for (var i = 0, len = nodeList.length; i < len; i++) 
                {
                    var node = nodeList[i];

                    if (node.tagName === 'H2') h2 = node;
                    if (node === el) break;
                }
                var source;
                if (h2) {
                    var modName = _.$(h2).text();
                    source = [
                        '// Only modules with all platform support can be required.',
                        'const ' + modName + ' = require("licia/' + modName + '");\n',
                        code
                    ].join('\n')
                } else {
                    source = [
                        '// You can\'t require modules that are supposed to run in browsers only.\n',
                        code
                    ].join('\n')
                }

                var newEl = document.createElement('div');
                container.replaceChild(newEl, el);
                RunKit.createNotebook({
                    element: newEl,
                    source: source
                });
            });
        });

    script(src='//embed.runkit.com')